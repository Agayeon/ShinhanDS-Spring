<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.firstzone.emp">

	<!-- Mybatis가 select 결과를 읽어서 resultType 객체를 생성(기본생성자필수)하고 setting한다.(setter필수) -->
	<select id="selectALL" resultType="empDTO">
		select * from employees order
		by 1
	</select>

	<select id="selectById" parameterType="int" resultType="empDTO">
		select *
		from employees where employee_id = #{aa}
	</select>


	<select id="selectByDept" parameterType="int"
		resultType="empDTO">
		select * from employees where department_id = #{deptid}
	</select>

	<select id="selectByJob" parameterType="string"
		resultType="empDTO">
		select * from employees where jobId = #{jobId}
	</select>

	<select id="selectByJobAndDept" parameterType="map"
		resultType="empDTO">
		select * from employees where job_id = #{jobid} and department_id =
		#{deptid}
	</select>

	
	<!-- 동적 SQL 문장 -->
	
<select id="selectByCondition"
        parameterType="com.shinhan.spring.model.EmpRequestDTO"
        resultType="empDTO">
  SELECT * FROM employees
  where salary >= #{salary}
    <if test="jobid != 'all'">
      and job_id = #{jobid}
    </if>

	<if test="date_check == 'false'">
	   and hire_date >= #{hire_date}
	</if>

    <if test="deptid[0]!=0">
      AND department_id IN
      <foreach collection="deptid" item="aa" open="(" separator="," close=")">
        #{aa}
      </foreach>
    </if>
  ORDER BY 1 ASC
</select>


	<insert id="insert" parameterType="empDTO">
		INSERT INTO employees (
		EMPLOYEE_ID,
		FIRST_NAME,
		LAST_NAME,
		EMAIL,
		PHONE_NUMBER,
		HIRE_DATE,
		JOB_ID,
		SALARY,
		COMMISSION_PCT,
		MANAGER_ID,
		DEPARTMENT_ID)

		values (
		#{employee_id},
		#{first_name},
		#{last_name},
		#{email},
		#{phone_number},
		#{hire_date},
		#{job_id},
		#{salary},
		#{commission_pct},
		#{manager_id},
		#{department_id}
		)
	</insert>

	<update id="update" parameterType="empDTO">
		UPDATE employees SET
		FIRST_NAME = #{first_name},
		LAST_NAME = #{last_name},
		EMAIL = #{email},
		PHONE_NUMBER = #{phone_number},
		HIRE_DATE = #{hire_date},
		JOB_ID = #{job_id},
		SALARY = #{salary},
		COMMISSION_PCT = #{commission_pct},
		MANAGER_ID = #{manager_id},
		DEPARTMENT_ID = #{department_id}
		WHERE EMPLOYEE_ID = #{employee_id}

	</update>

	<delete id="delete" parameterType="int">
		delete from employees where
		employee_id=#{employee_id}
	</delete>

</mapper>